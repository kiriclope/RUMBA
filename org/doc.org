#+STARTUP: fold
#+TITLE: EI Bump Attractor Network Model
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session dual_data :kernel dual_data

* notebook settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python


* EI Continuous Attractor Model
Here I implemented a balanced EI network that exhibits attractor dynamics.
** imports
#+begin_src ipython
  import sys
  sys.path.insert(0, '/home/leon/tmp/rnn_numba') # put here the path to the repo
  from src.model.rate_model import Network
#+end_src

#+RESULTS:

** Single trial
*** Simulation
To run a simulation, first we need to define a network model.
The class Network takes three mandatory arguments:

                1. The name of the configuration file that defines the model,
                   eg 'config_EI.yml', these files are in ../conf/ and well detailed.
                   
                2. The name of the output file that will contain the simulation data.
                   eg 'bump'. Simulation results will be saved as a data frame to '../data/simul/bump.h5'.
                   
                3. The path to the root of this repository.

One can also pass extra arguments to Network, basically any parameter that is in the config file so that it will be overwritten.
                   
#+begin_src ipython
  REPO_ROOT = "/home/leon/tmp/rnn_numba"
  model = Network('config_2pop.yml', 'bump', REPO_ROOT, VERBOSE=1)
#+end_src

#+RESULTS:
: Loading config from /home/leon/tmp/rnn_numba/conf/config_2pop.yml
: Saving data to /home/leon/tmp/rnn_numba/data/simul/bump.h5
: Jab [[ 2.  -1.5]
:  [ 1.  -1. ]]
: Tuning, KAPPA [0.6 0.  0.6 0. ]
: Asymmetry, SIGMA [0. 0. 0. 0.]
: Iext [0.5  0.25]

Then one just runs the model with
#+begin_src ipython
  model.run()
#+end_src

#+RESULTS:
#+begin_example
  Generating matrix Cij
  all to all connectivity
  with cosine structure
  all to all connectivity
  with cosine structure
  all to all connectivity
  with cosine structure
  all to all connectivity
  with cosine structure
  Saving matrix to /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Parameters:
  N 2000 Na [1500  500] K 1.0 Ka [1. 1.]
  Iext [0.5  0.25] Jab [ 2.  -1.5  1.  -1. ]
  Tuning, KAPPA [0.6 0.  0.6 0. ]
  Asymmetry, SIGMA [0. 0. 0. 0.]
  MF Rates: [-0.25 -0.  ]
  Transfert Func Sigmoid
  Running simulation
  times (s) 0.25 rates (Hz) [15.38, 13.66]
  times (s) 0.5 rates (Hz) [15.38, 13.65]
  times (s) 0.75 rates (Hz) [15.38, 13.64]
  times (s) 1.0 rates (Hz) [15.38, 13.67]
  STIM ON
  times (s) 1.25 rates (Hz) [15.38, 13.83]
  times (s) 1.5 rates (Hz) [15.38, 13.83]
  STIM OFF
  times (s) 1.75 rates (Hz) [15.38, 13.81]
  times (s) 2.0 rates (Hz) [15.38, 13.82]
  times (s) 2.25 rates (Hz) [15.38, 13.84]
  times (s) 2.5 rates (Hz) [15.38, 13.83]
  times (s) 2.75 rates (Hz) [15.38, 13.84]
  times (s) 3.0 rates (Hz) [15.38, 13.82]
  times (s) 3.25 rates (Hz) [15.38, 13.81]
  times (s) 3.5 rates (Hz) [15.38, 13.82]
  times (s) 3.75 rates (Hz) [15.38, 13.82]
  times (s) 4.0 rates (Hz) [15.38, 13.82]
  saving data to /home/leon/tmp/rnn_numba/data/simul/bump.h5
  Elapsed (with compilation) = 14.116994161042385s
#+end_example

*** Analysis
**** Imports
#+begin_src ipython
  import pandas as pd
  from src.analysis.decode import decode_bump
#+end_src

#+RESULTS:
: 7ecd988c-cf80-4c9a-b6be-f85e7bd11e6c

**** Load data
#+begin_src ipython
  df = pd.read_hdf(REPO_ROOT + "/data/simul/bump.h5", mode="r")
  df_E = df[df.neurons<1500]
  df_I = df[df.neurons>=500]
  print(df.head())
#+end_src

#+RESULTS:
:        rates        ff        h_E        h_I  neurons   time
: 0  15.378125 -0.573451  30.780855 -20.504734        0  0.249
: 1  15.378125 -0.419887  30.780855 -20.504734        1  0.249
: 2  15.378125 -1.284868  30.780854 -20.504734        2  0.249
: 3  15.378125 -0.012410  30.780853 -20.504734        3  0.249
: 4  15.378125 -0.355423  30.780851 -20.504734        4  0.249
**** Rates
***** raster
#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])
  pt = pd.pivot_table(df, values="rates", index=["neurons"], columns="time")

  sns.heatmap(pt[:1500], cmap="jet", ax=ax[0], vmax=15, vmin=0)
  ax[0].set_yticks([0, 500, 1000, 1500], [0, 500, 1000, 1500])
  ax[0].set_xticks([0, 2, 4, 6, 8], [0, 1, 2, 3, 4])
  ax[0].set_title('Excitatory')

  sns.heatmap(pt[1500:], cmap="jet", ax=ax[1], vmax=15, vmin=0)
  ax[1].set_yticks([0, 250, 500], [0, 250, 500])
  ax[1].set_xticks([0, 2, 4, 6, 8], [0, 1, 2, 3, 4])
  ax[1].set_title('Inhibitory')
  
  plt.show()
#+end_src

#+RESULTS:
: 81ce2943-73d4-4a52-811f-a560e64e339d

***** histograms

#+begin_src ipython
  mean_df_E = df_E.groupby("neurons").mean()
  mean_df_E[mean_df_E.rates<.001] = np.nan

  mean_df_I = df_I.groupby("neurons").mean()
  mean_df_I[mean_df_I.rates<.001] = np.nan

  sns.histplot(mean_df_E, x=mean_df_E.rates, kde=True, color='r', label='E')
  sns.histplot(mean_df_I, x=mean_df_I.rates, kde=True, color='b', label='I')
  plt.legend(fontsize=12)
  plt.xlabel("Rates (au)")
  plt.show()
#+end_src

#+RESULTS:
: f30fef55-f4e2-4add-8f41-a0eff5181e5d

**** Tuning

#+begin_src ipython
  data = df_E.groupby(['time'])['rates'].apply(decode_bump).reset_index()
  data[['m0', 'm1', 'phase']] = pd.DataFrame(data['rates'].tolist(), index=data.index)
  data = data.drop(columns=['rates'])

  print(data.head())
#+end_src

#+RESULTS:
:     time        m0        m1     phase
: 0  0.249  0.513658  0.017674  3.175195
: 1  0.499  0.503480  0.006174  1.890976
: 2  0.749  0.517241  0.021237  2.946893
: 3  0.999  0.498194  0.022528  4.234585
: 4  1.249  4.686576  5.824244  3.141923

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])
  
  sns.lineplot(data=data, x='time', y='m0', legend=False, lw=2, ax=ax[0])
  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('$\mathcal{F}_0 (Hz)$')
  ax[1].set_xticks([0, 1, 2, 3, 4])

  sns.lineplot(x=data['time'], y=data['m1']/data['m0'], legend=False, lw=2, ax=ax[1])
  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax[1].set_xticks([0, 1, 2, 3, 4])

  sns.lineplot(x=data['time'], y=data['phase']*180/np.pi, legend=False, lw=2, ax=ax[2])
  ax[2].set_xlabel('Time (s)')
  ax[2].set_ylabel('$\phi$ (Â°)')
  ax[2].set_xticks([0, 1, 2, 3, 4])
  ax[2].set_yticks([0, 90, 180, 270, 360])
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/a2843c01394ba579257416758c88eac704e22609.png]]

#+begin_src ipython

  
#+end_src

** Parameter Search
*** Changing J0
**** Simulation
#+begin_src ipython
  REPO_ROOT = "/home/leon/tmp/rnn_numba"  
  J0_list = np.linspace(.1, 3, 10)
  print(J0_list)
#+end_src

#+RESULTS:
: [0.1        0.42222222 0.74444444 1.06666667 1.38888889 1.71111111
:  2.03333333 2.35555556 2.67777778 3.        ]

#+begin_src ipython
  IF_LOAD_MAT = 0
  IF_SAVE_MAT = 1

  for J0 in J0_list:
      model = Network('config_2pop.yml', '2pop_J0_%.1f' % J0, REPO_ROOT,
                      IF_LOAD_MAT=IF_LOAD_MAT, IF_SAVE_MAT=IF_SAVE_MAT,
                      Jab=[1, -J0, 1, -1], VERBOSE=0)
      
      model.run()

      IF_LOAD_MAT = 1
      IF_SAVE_MAT = 0
#+end_src

#+RESULTS:
#+begin_example
  Loading config from /home/leon/tmp/rnn_numba/conf/config_2pop.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/2pop_J0_0.0.h5
  Generating matrix Cij
  Saving matrix to /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  /home/leon/tmp/rnn_numba/src/model/rate_model.py:180: RuntimeWarning: invalid value encountered in divide
    self.SIGMA = self.SIGMA / np.abs(self.Jab)
  Elapsed (with compilation) = 13.715521463076584s
  Loading config from /home/leon/tmp/rnn_numba/conf/config_2pop.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/2pop_J0_0.3.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 13.55905929300934s
  Loading config from /home/leon/tmp/rnn_numba/conf/config_2pop.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/2pop_J0_0.6.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 13.694595383945853s
  Loading config from /home/leon/tmp/rnn_numba/conf/config_2pop.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/2pop_J0_0.9.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 13.68189989507664s
  Loading config from /home/leon/tmp/rnn_numba/conf/config_2pop.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/2pop_J0_1.2.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 13.617455482017249s
  Loading config from /home/leon/tmp/rnn_numba/conf/config_2pop.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/2pop_J0_1.5.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 13.692804301972501s
  Loading config from /home/leon/tmp/rnn_numba/conf/config_2pop.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/2pop_J0_1.8.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 13.68109585007187s
  Loading config from /home/leon/tmp/rnn_numba/conf/config_2pop.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/2pop_J0_2.1.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 13.621808980009519s
  Loading config from /home/leon/tmp/rnn_numba/conf/config_2pop.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/2pop_J0_2.4.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 13.653374025016092s
  Loading config from /home/leon/tmp/rnn_numba/conf/config_2pop.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/2pop_J0_2.7.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 13.588475476950407s
  Loading config from /home/leon/tmp/rnn_numba/conf/config_2pop.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/2pop_J0_3.0.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 13.580890160985291s
#+end_example

**** Analysis
#+begin_src ipython
  J0_list = np.linspace(0, 3, 11)

  df_list = []

  for i in range(J0_list.shape[0]):
      df_i = pd.read_hdf(REPO_ROOT + "/data/simul/2pop_J0_%.1f.h5" % J0_list[i], mode="r")
      df_i['J0'] = J0_list[i]
      df_list.append(df_i)

  df = pd.concat(df_list, ignore_index=True)
  print(df.head())
#+end_src

#+RESULTS:
:       rates        ff       h_E  neurons   time   J0
: 0  2.979453  9.873323 -5.351787        0  0.499  2.0
: 1  2.830152 -4.640124 -5.351531        1  0.499  2.0
: 2  3.098595  2.158386 -5.351274        2  0.499  2.0
: 3  3.415840 -6.115636 -5.351014        3  0.499  2.0
: 4  3.625322  0.626738 -5.350751        4  0.499  2.0


#+begin_src ipython
  res = df.groupby(['time', 'J0'])['rates'].apply(decode_bump).reset_index()
  res[['m0', 'm1', 'phase']] = pd.DataFrame(res['rates'].tolist(), index=res.index)
  res = res.drop(columns=['rates'])
  print(res.head())
#+end_src

#+RESULTS:
:     time   J0        m0        m1     phase
: 0  0.499  2.0  2.643238  0.074680  4.044520
: 1  0.499  2.2  2.506782  0.028911  3.321685
: 2  0.499  2.4  2.372550  0.021852  6.135836
: 3  0.499  2.6  2.273263  0.004630  5.104311
: 4  0.499  2.8  2.154610  0.054661  5.969938

#+begin_src ipython
  last = res[res.time==res.time.iloc[-1]]
  last = last.drop(columns=['time'])
  print(last.head())
#+end_src

#+RESULTS:
:      J0        m0        m1     phase
: 77  2.0  7.223276  0.059838  5.009779
: 78  2.2  6.785306  0.235569  5.189480
: 79  2.4  6.319345  2.347832  3.364468
: 80  2.6  6.067178  4.456472  2.924240
: 81  2.8  5.822750  5.580686  3.089648

#+begin_src ipython
  sns.lineplot(last, x='J0', y=last['m1']/last['m0'])
  plt.xlabel('Recurrent Strength $J_0$')
  plt.ylabel('$\mathcal{F}_1$ (Hz)')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/f76613de4bb887e4b31e648704cdd64935475d1f.png]]

#+begin_src ipython

#+end_src

#+RESULTS:
** Multiple trials
*** Simulations
#+begin_src ipython
  ini_list = np.arange(1, 10)

  REPO_ROOT = "/home/leon/tmp/rnn_numba"

  IF_LOAD_MAT = 0
  IF_SAVE_MAT = 1

  for ini in ini_list:
      print('##########################################')
      print("trial", ini)
      print('##########################################')

      model = Network('config_EI.yml', 'bump_ini_%d' % ini, REPO_ROOT,
                      IF_LOAD_MAT=IF_LOAD_MAT, IF_SAVE_MAT=IF_SAVE_MAT)

      model.run()

      IF_LOAD_MAT = 1
      IF_SAVE_MAT = 0
      
#+end_src

#+results:
#+begin_example
  ##########################################
  trial 1
  ##########################################
  Loading config from /home/leon/tmp/rnn_numba/conf/config_EI.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/bump_ini_1.h5
  Generating matrix Cij
  Saving matrix to /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 59.94008179299999s
  ##########################################
  trial 2
  ##########################################
  Loading config from /home/leon/tmp/rnn_numba/conf/config_EI.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/bump_ini_2.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 58.91828673589043s
  ##########################################
  trial 3
  ##########################################
  Loading config from /home/leon/tmp/rnn_numba/conf/config_EI.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/bump_ini_3.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 59.18604208598845s
  ##########################################
  trial 4
  ##########################################
  Loading config from /home/leon/tmp/rnn_numba/conf/config_EI.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/bump_ini_4.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 60.01277774409391s
  ##########################################
  trial 5
  ##########################################
  Loading config from /home/leon/tmp/rnn_numba/conf/config_EI.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/bump_ini_5.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 59.28222737403121s
  ##########################################
  trial 6
  ##########################################
  Loading config from /home/leon/tmp/rnn_numba/conf/config_EI.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/bump_ini_6.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 59.428383418009616s
  ##########################################
  trial 7
  ##########################################
  Loading config from /home/leon/tmp/rnn_numba/conf/config_EI.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/bump_ini_7.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 59.492747734999284s
  ##########################################
  trial 8
  ##########################################
  Loading config from /home/leon/tmp/rnn_numba/conf/config_EI.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/bump_ini_8.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 53.652442602906376s
  ##########################################
  trial 9
  ##########################################
  Loading config from /home/leon/tmp/rnn_numba/conf/config_EI.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/bump_ini_9.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 50.68888223904651s
#+end_example

*** Analysis
**** Imports
#+begin_src ipython
import pandas as pd
from src.analysis.decode import decode_bump
#+end_src

#+RESULTS:

**** Load data
#+begin_src ipython
  ini_list = np.arange(1, 10)

  df_list = []

  for ini in ini_list:
      df_i = pd.read_hdf(REPO_ROOT + "/data/simul/bump_ini_%d.h5" % ini, mode="r")
      df_i['trial'] = ini
      df_list.append(df_i)

  df = pd.concat(df_list, ignore_index=True)
  df_E = df[df.neurons<7500]
  print(df.head())
#+end_src

#+RESULTS:
:       rates        ff       h_E       h_I  neurons   time  trial
: 0  0.026551  1.559067  0.607519 -3.676191        0  0.249      1
: 1  0.035987 -0.175400  0.605969 -3.863151        1  0.249      1
: 2  0.038527 -0.821442  0.616959 -4.002131        2  0.249      1
: 3  0.054012  1.180297  0.596296 -3.823737        3  0.249      1
: 4  0.053022  1.574449  0.541678 -3.569974        4  0.249      1

#+begin_src ipython
  data = df_E.groupby(['time', 'trial'])['rates'].apply(decode_bump).reset_index()
  data[['m0', 'm1', 'phase']] = pd.DataFrame(data['rates'].tolist(), index=data.index)
  data = data.drop(columns=['rates'])
  print(data.head())
#+end_src

#+RESULTS:
:     time  trial        m0        m1     phase
: 0  0.249      1  0.027236  0.000214  5.286942
: 1  0.249      2  0.026499  0.000367  5.583405
: 2  0.249      3  0.026858  0.000417  0.416132
: 3  0.249      4  0.027228  0.000225  3.461241
: 4  0.249      5  0.026906  0.000285  4.473676

#+begin_src ipython
  end_point = data[data.time == data.time.iloc[-1]]
  print(end_point.head())  
#+end_src

#+RESULTS:
:       time  trial        m0        m1     phase
: 135  3.999      1  0.364449  0.318936  3.722584
: 136  3.999      2  0.365353  0.314348  3.685926
: 137  3.999      3  0.361278  0.314820  3.690810
: 138  3.999      4  0.363572  0.315568  3.700796
: 139  3.999      5  0.364761  0.320093  3.639834

**** Phases 
#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(data=data, x='time', y=data['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], hue='trial')
  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('$\phi$ (Â°)')
  ax[0].set_xticks([0, 1, 2, 3, 4])
  ax[0].set_yticks([0, 90, 180, 270, 360])

  sns.histplot(data=end_point, x=end_point['phase']*180/np.pi, legend=False, ax=ax[1], bins='auto', kde=True)
  ax[1].set_xlabel('$\phi$ (Â°)')
  ax[1].set_ylabel('$Count$')
  # ax[1].set_xticks([0, 90, 180, 270, 360])
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/c58995b988723f1b09be9f70dcb826cdee33e4e0.png]]

**** Precision Errors

#+begin_src ipython
  from scipy.stats import circmean
  stim_phase = np.pi
  
  end_point['accuracy'] = end_point.phase - stim_phase
  end_point['precision'] = end_point.phase - circmean(end_point.phase)
  print(end_point.head())
#+end_src

#+RESULTS:
#+begin_example
        time  trial        m0        m1     phase  accuracy  precision
  135  3.999      1  0.364449  0.318936  3.722584  0.580992   0.029979
  136  3.999      2  0.365353  0.314348  3.685926  0.544333  -0.006680
  137  3.999      3  0.361278  0.314820  3.690810  0.549218  -0.001795
  138  3.999      4  0.363572  0.315568  3.700796  0.559204   0.008191
  139  3.999      5  0.364761  0.320093  3.639834  0.498242  -0.052771
  /tmp/ipykernel_3718977/1857574883.py:4: SettingWithCopyWarning: 
  A value is trying to be set on a copy of a slice from a DataFrame.
  Try using .loc[row_indexer,col_indexer] = value instead

  See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
    end_point['accuracy'] = end_point.phase - stim_phase
  /tmp/ipykernel_3718977/1857574883.py:5: SettingWithCopyWarning: 
  A value is trying to be set on a copy of a slice from a DataFrame.
  Try using .loc[row_indexer,col_indexer] = value instead

  See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
    end_point['precision'] = end_point.phase - circmean(end_point.phase)
#+end_example

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.histplot(data=end_point, x=end_point['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[0])
  ax[0].set_xlabel('$\phi - \phi_{stim}$ (Â°)')
  ax[0].set_ylabel('Count')

  sns.histplot(data=end_point, x=end_point['precision']*180/np.pi, legend=False, ax=ax[1], bins='auto', kde=True)
  ax[1].set_xlabel('$\phi - <\phi>_{trials}$ (Â°)')
  ax[1].set_ylabel('$Count$')

  plt.show()  
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/4b114fa93c95418d96d6689c7f7d2e312ee3bc36.png]]


* EI Bump Attractor Model
Here I implemented a balanced EI network that exhibits attractor dynamics.
** imports
#+begin_src ipython
  import sys
  sys.path.insert(0, '/home/leon/tmp/rnn_numba') # put here the path to the repo
  from src.model.rate_model import Network
#+end_src

#+RESULTS:

** Single trial
*** Simulation
To run a simulation, first we need to define a network model.
The class Network takes three mandatory arguments:

                1. The name of the configuration file that defines the model,
                   eg 'config_EI.yml', these files are in ../conf/ and well detailed.
                   
                2. The name of the output file that will contain the simulation data.
                   eg 'bump'. Simulation results will be saved as a data frame to '../data/simul/bump.h5'.
                   
                3. The path to the root of this repository.

One can also pass extra arguments to Network, basically any parameter that is in the config file so that it will be overwritten.
                   
#+begin_src ipython
  REPO_ROOT = "/home/leon/tmp/rnn_numba"
  model = Network('config_EI.yml', 'bump', REPO_ROOT, VERBOSE=1)
#+end_src

#+RESULTS:
: Loading config from /home/leon/tmp/rnn_numba/conf/config_EI.yml
: Saving data to /home/leon/tmp/rnn_numba/data/simul/bump.h5
: Jab [[ 1.  -1.5]
:  [ 1.  -1. ]]
: Tuning, KAPPA [5. 0. 0. 0.]
: Asymmetry, SIGMA [0. 0. 0. 0.]
: Iext [0.5  0.25]

Then one just runs the model with
#+begin_src ipython
  model.run()
#+end_src

#+RESULTS:
#+begin_example
  Generating matrix Cij
  sparse connectivity
  with spec cosine structure
  sparse connectivity
  sparse connectivity
  sparse connectivity
  Saving matrix to /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Parameters:
  N 10000 Na [7500 2500] K 500.0 Ka [500. 500.]
  Iext [11.18033989  5.59016994] Jab [ 0.04472136 -0.06708204  0.04472136 -0.04472136]
  Tuning, KAPPA [5. 0. 0. 0.]
  Asymmetry, SIGMA [0. 0. 0. 0.]
  MF Rates: [0.25 0.5 ]
  Transfert Func Sigmoid
  Running simulation
  times (s) 0.25 rates (Hz) [0.03, 0.12]
  times (s) 0.5 rates (Hz) [0.03, 0.12]
  times (s) 0.75 rates (Hz) [0.03, 0.11]
  times (s) 1.0 rates (Hz) [0.03, 0.12]
  STIM ON
  times (s) 1.25 rates (Hz) [0.53, 0.74]
  times (s) 1.5 rates (Hz) [0.53, 0.74]
  STIM OFF
  times (s) 1.75 rates (Hz) [0.36, 0.6]
  times (s) 2.0 rates (Hz) [0.36, 0.6]
  times (s) 2.25 rates (Hz) [0.36, 0.6]
  times (s) 2.5 rates (Hz) [0.36, 0.6]
  times (s) 2.75 rates (Hz) [0.36, 0.6]
  times (s) 3.0 rates (Hz) [0.37, 0.6]
  times (s) 3.25 rates (Hz) [0.36, 0.6]
  times (s) 3.5 rates (Hz) [0.36, 0.6]
  times (s) 3.75 rates (Hz) [0.36, 0.6]
  times (s) 4.0 rates (Hz) [0.36, 0.6]
  saving data to /home/leon/tmp/rnn_numba/data/simul/bump.h5
  Elapsed (with compilation) = 51.37116646301001s
#+end_example

*** Analysis
**** Imports
#+begin_src ipython
  import pandas as pd
  from src.analysis.decode import decode_bump
#+end_src

#+RESULTS:

**** Load data
#+begin_src ipython
  df = pd.read_hdf(REPO_ROOT + "/data/simul/bump.h5", mode="r")
  df_E = df[df.neurons<7500]
  df_I = df[df.neurons>=7500]
  
  print(df.head())
#+end_src

#+RESULTS:
:       rates        ff       h_E       h_I  neurons   time
: 0  0.011703  2.091137  0.576383 -4.108179        0  0.249
: 1  0.029542 -0.019575  0.606391 -3.970378        1  0.249
: 2  0.023473  0.143316  0.640388 -3.931326        2  0.249
: 3  0.018428  0.317533  0.646514 -3.824877        3  0.249
: 4  0.014366 -0.533621  0.623375 -4.003720        4  0.249
**** Rates
***** raster
#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])
  pt = pd.pivot_table(df, values="rates", index=["neurons"], columns="time")

  sns.heatmap(pt[:7500], cmap="jet", ax=ax[0], vmax=1, vmin=0)
  ax[0].set_yticks([0, 2500, 5000, 7500], [0, 2500, 5000, 7500])
  ax[0].set_xticks([0, 2, 4, 6, 8], [0, 1, 2, 3, 4])
  ax[0].set_title('Excitatory')

  sns.heatmap(pt[7500:], cmap="jet", ax=ax[1], vmax=1, vmin=0)
  ax[1].set_yticks([0, 625, 1250, 1875, 2500], [0, 625, 1250, 1875, 2500])
  ax[1].set_xticks([0, 2, 4, 6, 8], [0, 1, 2, 3, 4])
  ax[1].set_title('Inhibitory')
  
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/6463eb2251b70e773bab6b3c8ac4502a19545658.png]]

***** histograms

#+begin_src ipython
  mean_df_E = df_E.groupby("neurons").mean()
  mean_df_E[mean_df_E.rates<.001] = np.nan

  mean_df_I = df_I.groupby("neurons").mean()
  mean_df_I[mean_df_I.rates<.001] = np.nan

  sns.histplot(mean_df_E, x=mean_df_E.rates, kde=True, color='r', label='E')
  sns.histplot(mean_df_I, x=mean_df_I.rates, kde=True, color='b', label='I')
  plt.legend(fontsize=12)
  plt.xlabel("Rates (au)")
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/1a9c1b567c3ab22d56bb34304662b30af8a37d76.png]]

**** Tuning

#+begin_src ipython
  data = df_E.groupby(['time'])['rates'].apply(decode_bump).reset_index()
  data[['m0', 'm1', 'phase']] = pd.DataFrame(data['rates'].tolist(), index=data.index)
  data = data.drop(columns=['rates'])

  print(data.head())
#+end_src

#+RESULTS:
:     time        m0        m1     phase
: 0  0.249  0.027317  0.000451  3.921320
: 1  0.499  0.026888  0.000202  3.518808
: 2  0.749  0.026718  0.000084  3.626537
: 3  0.999  0.026812  0.000093  5.765621
: 4  1.249  0.531907  0.598873  3.163694

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])
  
  sns.lineplot(data=data, x='time', y='m0', legend=False, lw=2, ax=ax[0])
  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('$\mathcal{F}_0 (Hz)$')
  ax[1].set_xticks([0, 1, 2, 3, 4])

  sns.lineplot(x=data['time'], y=data['m1']/data['m0'], legend=False, lw=2, ax=ax[1])
  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax[1].set_xticks([0, 1, 2, 3, 4])

  sns.lineplot(x=data['time'], y=data['phase']*180/np.pi, legend=False, lw=2, ax=ax[2])
  ax[2].set_xlabel('Time (s)')
  ax[2].set_ylabel('$\phi$ (Â°)')
  ax[2].set_xticks([0, 1, 2, 3, 4])
  ax[2].set_yticks([0, 90, 180, 270, 360])
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/ce4ca0715fa00f6388a19dbe6ea909decac78503.png]]

** Multiple trials
*** Simulations
#+begin_src ipython
  ini_list = np.arange(1, 10)

  REPO_ROOT = "/home/leon/tmp/rnn_numba"

  IF_LOAD_MAT = 0
  IF_SAVE_MAT = 1

  for ini in ini_list:
      print('##########################################')
      print("trial", ini)
      print('##########################################')

      model = Network('config_EI.yml', 'bump_ini_%d' % ini, REPO_ROOT,
                      IF_LOAD_MAT=IF_LOAD_MAT, IF_SAVE_MAT=IF_SAVE_MAT)

      model.run()

      IF_LOAD_MAT = 1
      IF_SAVE_MAT = 0
      
#+end_src

#+results:
#+begin_example
  ##########################################
  trial 1
  ##########################################
  Loading config from /home/leon/tmp/rnn_numba/conf/config_EI.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/bump_ini_1.h5
  Generating matrix Cij
  Saving matrix to /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 51.05978687806055s
  ##########################################
  trial 2
  ##########################################
  Loading config from /home/leon/tmp/rnn_numba/conf/config_EI.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/bump_ini_2.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 59.463344207033515s
  ##########################################
  trial 3
  ##########################################
  Loading config from /home/leon/tmp/rnn_numba/conf/config_EI.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/bump_ini_3.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 59.76340044499375s
  ##########################################
  trial 4
  ##########################################
  Loading config from /home/leon/tmp/rnn_numba/conf/config_EI.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/bump_ini_4.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 50.80682804493699s
  ##########################################
  trial 5
  ##########################################
  Loading config from /home/leon/tmp/rnn_numba/conf/config_EI.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/bump_ini_5.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 59.20731191406958s
  ##########################################
  trial 6
  ##########################################
  Loading config from /home/leon/tmp/rnn_numba/conf/config_EI.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/bump_ini_6.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 52.11593077890575s
  ##########################################
  trial 7
  ##########################################
  Loading config from /home/leon/tmp/rnn_numba/conf/config_EI.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/bump_ini_7.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 54.824766193982214s
  ##########################################
  trial 8
  ##########################################
  Loading config from /home/leon/tmp/rnn_numba/conf/config_EI.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/bump_ini_8.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 50.43251221999526s
  ##########################################
  trial 9
  ##########################################
  Loading config from /home/leon/tmp/rnn_numba/conf/config_EI.yml
  Saving data to /home/leon/tmp/rnn_numba/data/simul/bump_ini_9.h5
  Loading matrix from /home/leon/tmp/rnn_numba/data/matrix/Cij.npy
  Running simulation
  Elapsed (with compilation) = 51.49602844903711s
#+end_example

*** Analysis
**** Imports
#+begin_src ipython
import pandas as pd
from src.analysis.decode import decode_bump
#+end_src

#+RESULTS:

**** Load data
#+begin_src ipython
  ini_list = np.arange(1, 10)

  df_list = []

  for ini in ini_list:
      df_i = pd.read_hdf(REPO_ROOT + "/data/simul/bump_ini_%d.h5" % ini, mode="r")
      df_i['trial'] = ini
      df_list.append(df_i)

  df = pd.concat(df_list, ignore_index=True)
  df_E = df[df.neurons<7500]
  print(df.head())
#+end_src

#+RESULTS:
:       rates        ff       h_E       h_I  neurons   time  trial
: 0  0.026551  1.559067  0.607519 -3.676191        0  0.249      1
: 1  0.035987 -0.175400  0.605969 -3.863151        1  0.249      1
: 2  0.038527 -0.821442  0.616959 -4.002131        2  0.249      1
: 3  0.054012  1.180297  0.596296 -3.823737        3  0.249      1
: 4  0.053022  1.574449  0.541678 -3.569974        4  0.249      1

#+begin_src ipython
  data = df_E.groupby(['time', 'trial'])['rates'].apply(decode_bump).reset_index()
  data[['m0', 'm1', 'phase']] = pd.DataFrame(data['rates'].tolist(), index=data.index)
  data = data.drop(columns=['rates'])
  print(data.head())
#+end_src

#+RESULTS:
:     time  trial        m0        m1     phase
: 0  0.249      1  0.027236  0.000214  5.286942
: 1  0.249      2  0.026499  0.000367  5.583405
: 2  0.249      3  0.026858  0.000417  0.416132
: 3  0.249      4  0.027228  0.000225  3.461241
: 4  0.249      5  0.026906  0.000285  4.473676

#+begin_src ipython
  end_point = data[data.time == data.time.iloc[-1]]
  print(end_point.head())  
#+end_src

#+RESULTS:
:       time  trial        m0        m1     phase
: 135  3.999      1  0.364449  0.318936  3.722584
: 136  3.999      2  0.365353  0.314348  3.685926
: 137  3.999      3  0.361278  0.314820  3.690810
: 138  3.999      4  0.363572  0.315568  3.700796
: 139  3.999      5  0.364761  0.320093  3.639834

**** Phases 
#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(data=data, x='time', y=data['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], hue='trial')
  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('$\phi$ (Â°)')
  ax[0].set_xticks([0, 1, 2, 3, 4])
  ax[0].set_yticks([0, 90, 180, 270, 360])

  sns.histplot(data=end_point, x=end_point['phase']*180/np.pi, legend=False, ax=ax[1], bins='auto', kde=True)
  ax[1].set_xlabel('$\phi$ (Â°)')
  ax[1].set_ylabel('$Count$')
  # ax[1].set_xticks([0, 90, 180, 270, 360])
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/c58995b988723f1b09be9f70dcb826cdee33e4e0.png]]

**** Precision Errors

#+begin_src ipython
  from scipy.stats import circmean
  stim_phase = np.pi
  
  end_point['accuracy'] = end_point.phase - stim_phase
  end_point['precision'] = end_point.phase - circmean(end_point.phase)
  print(end_point.head())
#+end_src

#+RESULTS:
#+begin_example
        time  trial        m0        m1     phase  accuracy  precision
  135  3.999      1  0.364449  0.318936  3.722584  0.580992   0.029979
  136  3.999      2  0.365353  0.314348  3.685926  0.544333  -0.006680
  137  3.999      3  0.361278  0.314820  3.690810  0.549218  -0.001795
  138  3.999      4  0.363572  0.315568  3.700796  0.559204   0.008191
  139  3.999      5  0.364761  0.320093  3.639834  0.498242  -0.052771
  /tmp/ipykernel_3718977/1857574883.py:4: SettingWithCopyWarning: 
  A value is trying to be set on a copy of a slice from a DataFrame.
  Try using .loc[row_indexer,col_indexer] = value instead

  See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
    end_point['accuracy'] = end_point.phase - stim_phase
  /tmp/ipykernel_3718977/1857574883.py:5: SettingWithCopyWarning: 
  A value is trying to be set on a copy of a slice from a DataFrame.
  Try using .loc[row_indexer,col_indexer] = value instead

  See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
    end_point['precision'] = end_point.phase - circmean(end_point.phase)
#+end_example

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.histplot(data=end_point, x=end_point['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[0])
  ax[0].set_xlabel('$\phi - \phi_{stim}$ (Â°)')
  ax[0].set_ylabel('Count')

  sns.histplot(data=end_point, x=end_point['precision']*180/np.pi, legend=False, ax=ax[1], bins='auto', kde=True)
  ax[1].set_xlabel('$\phi - <\phi>_{trials}$ (Â°)')
  ax[1].set_ylabel('$Count$')

  plt.show()  
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/4b114fa93c95418d96d6689c7f7d2e312ee3bc36.png]]
